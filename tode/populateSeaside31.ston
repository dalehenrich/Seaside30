TDSmalltalkLeafNode {	#name : 'populateSeaside31',	#contents : '| version imports importedVersions project constructor packageNames repositories methodSections gofer methodSectionMap |\npackageNames := Set new.\nrepositories := Set new.\nmethodSections := #().\nproject := ConfigurationOfSeaside30 project.\nversion := project version: \'3.1.0\'.\nimports := importedVersions := version importedVersions.\nimportedVersions := imports asSet.\n[ imports isEmpty not ]\n  whileTrue: [ \n    | newImports |\n    newImports := Set new.\n    imports\n      do: [ :versionString | \n        version := project version: versionString.\n        newImports := version importedVersions ].\n    importedVersions addAll: newImports.\n    imports := newImports ].\nimportedVersions := importedVersions asArray.\nimportedVersions\n  do: [ :sourceVersionString | \n    constructor := MetacelloToolBoxConstructor new.\n    constructor configuration: ConfigurationOfSeaside30 new.\n    constructor extractMethodSectionsFor: sourceVersionString.\n    methodSections := methodSections , constructor methodSections ].\nmethodSectionMap := Dictionary new.\nmethodSections\n  do: [ :methodSection | \n    | coll |\n    coll := methodSectionMap\n      at: methodSection attributePath\n      ifAbsent: [ methodSectionMap at: methodSection attributePath put: OrderedCollection new ].\n    coll add: methodSection ].\n#(#\'common\' #\'squeakCommon\' #\'pharo\' #\'squeak\' #\'pharo1.4.x\')\n  do: [ :attribute | \n    | sections |\n    \"explicitly excluding #\'pharo1.0.x\'\"\n    sections := methodSectionMap\n      at: attribute asMetacelloAttributePath\n      ifAbsent: [ #() ].\n    sections\n      do: [ :methodSection | \n        | versionSpec repos |\n        versionSpec := methodSection versionSpec.\n        repos := versionSpec repositorySpecs\n          collect: [ :repoSpec | repoSpec createRepository ].\n        repositories addAll: repos.\n        versionSpec packages\n          specListDo: [ :packageSpec | \n            packageSpec getFile ifNotNil: [ :file | packageNames add: file ].\n            repos := packageSpec repositorySpecs\n              collect: [ :repoSpec | repoSpec createRepository ].\n            repositories addAll: repos ] ] ].\ngofer := Gofer new.\nrepositories do: [ :repo | gofer repository: repo ].\npackageNames do: [ :packageName | gofer version: packageName ].\ngofer fetch.\ngofer := Gofer new.\npackageNames do: [ :packageName | gofer version: packageName ].\ngofer\n  repository:\n    (TDMonticelloTool new\n      repositoryFromDescription: \'filetree:///opt/git/Seaside30/packages\').\ngofer push'}